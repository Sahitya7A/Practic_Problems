collection-Object:group of multiple objects into a single unit
      ||
used to store+retrieve+manipulate data

-framework:reprsent and manipulate collections

-interfaces and classes store and process data efficiently

The <E> syntax tells you that the interface is generic.

When you declare a Collection instance, you should specify the type of object contained in the collection. Specifying the type allows compiler to verify (at compile-time) the type of object you put into the collection, thus reducing the errors at runtime.

Generics makes the code more stable by making more bugs detectable at compile time.

 type parameter. Like formal parameters used in method declarations, type parameters provide a way for you to re-use the same code with different inputs.
he difference is that the inputs to formal parameters are values, while the inputs to type parameters are types. The actual type that is substituted for the type parameter is called as a type argument

applications:generices
->strong type check
->can use generic algorithms:single task for different types instead of creating algorithms
->no type casting rrequired
/*generics-page 3-5*/



-->
Then why should you explicitly use an iterator?

Modification of a collection inside a for loop throws ConcurrentModificationException. Iterator allows modifying a collection 
while traversing and hence such an exception can be avoided.

You will know about the iterator() method in details later.

Note: Iterators maintain a cursor to identify the location of elements.



-->
It is considered as a good practice to use interface as reference type because if you declare a collection using an 
interface type, your code would be more flexible as the implementation can be changed whenever required.

-->
While elements are added to a Set, it will check for duplicates and remove them.

In HashSet, as mentioned earlier, equals() and hashCode() methods are used for detecting duplicates.

If two objects are equal based on the equals() method, they will be considered as duplicates.

Classes like Integer, Float, String, etc. have already overridden equals() and hashCode() for checking the values.

When user defined classes are used, equals() and hashCode() needs to be overridden by the developer to compare 
the objects based on specific attributes. You will now see a tryout for it.

-->
Queue represents an ordered list of elements

Queue supports all methods of Collection interface

All queues support insertion at the tail of the queue and removal from the head of the queue, except Deque

Deques are queues but they support element insertion and removal at both ends

Queues typically, but do not necessarily, order elements in a FIFO (first-in-first-out) manner. Among the exceptions are 

Priority queues, which order elements according to a supplied comparator, or the elements' natural ordering

LIFO queues (or stacks) which order the elements according to LIFO (last-in-first-out)

Queue implementations generally do not allow insertion of null elements, although some of them do not prohibit insertion of null. It is advisable not to insert null into a Queue as null is returned by the poll method when the queue contains no elements.
-->
Algorithm is a set of well defined instructions to be executed in a certain order to solve a problem. You would know that an algorithm consists of an input, a procedure or set of instructions and an output. 
-->

