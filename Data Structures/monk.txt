/*The Monk is extremely fond of Prateek, the new HackerEarth moderator. This time,
Prateek had to deal with a crazy hash function, f(n), called the r3gz3n function,
which is as follows: N xor (sumofdigitsofN). For example, f(81) = 81 ^ (8+1) = 88.
Now to test the efficiency of his friend, The Monk gives Prateek a list of N numbers,
and asks him to find out the following information about this list:
•	The value of the r3gz3n function which occurs the maximum number of times.
•	Number of collisions with the hash function.
Note-1: If all the values of the function are unique, print the maximum value which occurs in the list
of the hashed values.
Note-2: If there are multiple hashed values which occur the maximum number of times,
print the smallest hashed value with the maximum count.
Input format:
The first line will contain a single digit integer, N, denoting the number of numbers in a list.
The second line will contain N integers, each separated by a space.
Output format:
Print two integers separated by a space, where the first integer denotes the value of the function
which occurs the maximum number of times. Remember that if all the values of the function are unique,
print the maximumvalue which occurs in the list. The second integer would denote the number of collisions.
Constraints:
1 ≤ N ≤ 105
1 ≤ Ni ≤ 107
Sample Input-0:
4
10 11 12 13
Sample Output-0:
9 1
Sample Explanation-0:
10^1 = 11.
11^2 = 9.
12^3 = 15.
13^4 = 9.
The value which occurs the maximum number of times is: 9, and the number of collisions is: 1.
Sample Input-1:
4
1 1 21 21
Sample Output-1:
0 2
Sample Explanation-1:
1^1 = 0.
1^1 = 0.
21^3 = 22.
21^3 = 22.
The value which occurs the maximum number of times: 0, and 22; but since 0 is the smaller one, that is our answer.The number of collisions are: 2.
SAMPLE INPUT

2
40 50
SAMPLE OUTPUT

55 0
Explanation
As here, N=2
1) 40^(4+0)=44
2) 50^(5+0)=55
Here all the values are unique, so maximum value will be 55 and number of collisions are 0.
#include <stdio.h>
#define SIZE 105

struct hashtab
{
    int key;
    int cc;
};

struct hashtab h[SIZE];
int n;

void insert()
{
    int sum=0,t,r,index,key;
    scanf("%d",&key);
    t=key;
    while(t!=0)
    {
        r=t%10;
        sum=sum+r;
        t=t/10;
    }
    index=key^sum;
    if(h[index].key==0)
    {
        h[index].key=key;
    }
    else
    {
        h[index].cc++;
    }
}
void search()
{
    int i,pos=0,big,col=0;
    big=h[0].cc;
    for(i=1;i<SIZE;i++)
    {
        if(h[i].cc>big)
        {
            big=h[i].cc;
            pos=i;
        }
    }
    for(i=0;i<SIZE;i++)
    {
        if(h[i].cc!=0)
        {
            col=col+h[i].cc;
        }
    }
    if(big!=0)
    {
        printf("%d %d",pos,col);
    }
    else if(big==0)
    {
        for(i=0;i<SIZE;i++)
        {
            if(h[i].key!=0)
            {
                pos=i;
            }
        }
        printf("%d %d",pos,col);
    }
}
int main()
{
    int i;
    scanf("%d",&n);
    for(i=0;i<SIZE;i++)
    {
        h[i].cc=0;
        h[i].key=0;
    }
    for(i=0;i<n;i++)
    {
    insert();
    }
    search();
    return 0;
}
*/
